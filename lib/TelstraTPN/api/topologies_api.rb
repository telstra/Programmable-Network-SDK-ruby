=begin
#Telstra Programmable Network API

#Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module TelstraTPN
  class TopologiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a named topology tag
    # Create a named topology tag
    # @param [Hash] opts the optional parameters
    # @option opts [Ttms100TopologyTagRequest] :body 
    # @return [Topology]
    def create_a_named_topology_tag(opts = {})
      data, _status_code, _headers = create_a_named_topology_tag_with_http_info(opts)
      return data
    end

    # Create a named topology tag
    # Create a named topology tag
    # @param [Hash] opts the optional parameters
    # @option opts [Ttms100TopologyTagRequest] :body 
    # @return [Array<(Topology, Fixnum, Hash)>] Topology data, response status code and response headers
    def create_a_named_topology_tag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TopologiesApi.create_a_named_topology_tag ..."
      end
      # resource path
      local_var_path = "/ttms/1.0.0/topology_tag"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Topology')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TopologiesApi#create_a_named_topology_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information about the specified topology tag
    # Get information about the specified topology tag
    # @param topotaguuid Unique identifier representing a specific topology tag
    # @param [Hash] opts the optional parameters
    # @return [Topology]
    def get_information_about_the_specified_topology_tag(topotaguuid, opts = {})
      data, _status_code, _headers = get_information_about_the_specified_topology_tag_with_http_info(topotaguuid, opts)
      return data
    end

    # Get information about the specified topology tag
    # Get information about the specified topology tag
    # @param topotaguuid Unique identifier representing a specific topology tag
    # @param [Hash] opts the optional parameters
    # @return [Array<(Topology, Fixnum, Hash)>] Topology data, response status code and response headers
    def get_information_about_the_specified_topology_tag_with_http_info(topotaguuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TopologiesApi.get_information_about_the_specified_topology_tag ..."
      end
      # verify the required parameter 'topotaguuid' is set
      if @api_client.config.client_side_validation && topotaguuid.nil?
        fail ArgumentError, "Missing the required parameter 'topotaguuid' when calling TopologiesApi.get_information_about_the_specified_topology_tag"
      end
      # resource path
      local_var_path = "/ttms/1.0.0/topology_tag/{topotaguuid}/".sub('{' + 'topotaguuid' + '}', topotaguuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Topology')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TopologiesApi#get_information_about_the_specified_topology_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all topology tags
    # List all topology tags
    # @param [Hash] opts the optional parameters
    # @return [Array<Topology>]
    def list_all_topology_tags(opts = {})
      data, _status_code, _headers = list_all_topology_tags_with_http_info(opts)
      return data
    end

    # List all topology tags
    # List all topology tags
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Topology>, Fixnum, Hash)>] Array<Topology> data, response status code and response headers
    def list_all_topology_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TopologiesApi.list_all_topology_tags ..."
      end
      # resource path
      local_var_path = "/ttms/1.0.0/topology_tag"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Topology>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TopologiesApi#list_all_topology_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List objects for Topology
    # List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.
    # @param topotaguuid Unique identifier representing a specific topology tag
    # @param [Hash] opts the optional parameters
    # @return [Ttms100TopologyTagObjectsResponse]
    def list_objects_for_topology(topotaguuid, opts = {})
      data, _status_code, _headers = list_objects_for_topology_with_http_info(topotaguuid, opts)
      return data
    end

    # List objects for Topology
    # List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.
    # @param topotaguuid Unique identifier representing a specific topology tag
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ttms100TopologyTagObjectsResponse, Fixnum, Hash)>] Ttms100TopologyTagObjectsResponse data, response status code and response headers
    def list_objects_for_topology_with_http_info(topotaguuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TopologiesApi.list_objects_for_topology ..."
      end
      # verify the required parameter 'topotaguuid' is set
      if @api_client.config.client_side_validation && topotaguuid.nil?
        fail ArgumentError, "Missing the required parameter 'topotaguuid' when calling TopologiesApi.list_objects_for_topology"
      end
      # resource path
      local_var_path = "/ttms/1.0.0/topology_tag/{topotaguuid}/objects/".sub('{' + 'topotaguuid' + '}', topotaguuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ttms100TopologyTagObjectsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TopologiesApi#list_objects_for_topology\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
