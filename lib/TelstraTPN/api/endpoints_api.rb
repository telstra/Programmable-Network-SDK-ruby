=begin
#Telstra Programmable Network API

#Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module TelstraTPN
  class EndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Physical (Port) Endpoint
    # Create Physical (Port) Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Model100InventoryRegularendpointRequest] :body 
    # @return [Model100InventoryRegularendpointResponse]
    def create_physical__port_endpoint(opts = {})
      data, _status_code, _headers = create_physical__port_endpoint_with_http_info(opts)
      return data
    end

    # Create Physical (Port) Endpoint
    # Create Physical (Port) Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Model100InventoryRegularendpointRequest] :body 
    # @return [Array<(Model100InventoryRegularendpointResponse, Fixnum, Hash)>] Model100InventoryRegularendpointResponse data, response status code and response headers
    def create_physical__port_endpoint_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.create_physical__port_endpoint ..."
      end
      # resource path
      local_var_path = "/1.0.0/inventory/regularendpoint"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Model100InventoryRegularendpointResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#create_physical__port_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create VNF Endpoint
    # Create VNF Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Model100InventoryVnfendpointRequest] :body 
    # @return [Model100InventoryVnfendpointResponse]
    def create_vnf_endpoint(opts = {})
      data, _status_code, _headers = create_vnf_endpoint_with_http_info(opts)
      return data
    end

    # Create VNF Endpoint
    # Create VNF Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Model100InventoryVnfendpointRequest] :body 
    # @return [Array<(Model100InventoryVnfendpointResponse, Fixnum, Hash)>] Model100InventoryVnfendpointResponse data, response status code and response headers
    def create_vnf_endpoint_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.create_vnf_endpoint ..."
      end
      # resource path
      local_var_path = "/1.0.0/inventory/vnfendpoint"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Model100InventoryVnfendpointResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#create_vnf_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information about the specified endpoint
    # Get information about the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [Model100InventoryEndpointResponse]
    def get_information_about_the_specified_endpoint(endpointuuid, opts = {})
      data, _status_code, _headers = get_information_about_the_specified_endpoint_with_http_info(endpointuuid, opts)
      return data
    end

    # Get information about the specified endpoint
    # Get information about the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [Array<(Model100InventoryEndpointResponse, Fixnum, Hash)>] Model100InventoryEndpointResponse data, response status code and response headers
    def get_information_about_the_specified_endpoint_with_http_info(endpointuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.get_information_about_the_specified_endpoint ..."
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.get_information_about_the_specified_endpoint"
      end
      # resource path
      local_var_path = "/1.0.0/inventory/endpoint/{endpointuuid}".sub('{' + 'endpointuuid' + '}', endpointuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Model100InventoryEndpointResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#get_information_about_the_specified_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of endpoints for a customer
    # Get list of endpoints for a customer
    # @param customeruuid Unique identifier representing a specific customer
    # @param [Hash] opts the optional parameters
    # @return [Model100InventoryEndpointsCustomeruuidResponse]
    def get_list_of_endpoints_for_a_customer(customeruuid, opts = {})
      data, _status_code, _headers = get_list_of_endpoints_for_a_customer_with_http_info(customeruuid, opts)
      return data
    end

    # Get list of endpoints for a customer
    # Get list of endpoints for a customer
    # @param customeruuid Unique identifier representing a specific customer
    # @param [Hash] opts the optional parameters
    # @return [Array<(Model100InventoryEndpointsCustomeruuidResponse, Fixnum, Hash)>] Model100InventoryEndpointsCustomeruuidResponse data, response status code and response headers
    def get_list_of_endpoints_for_a_customer_with_http_info(customeruuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.get_list_of_endpoints_for_a_customer ..."
      end
      # verify the required parameter 'customeruuid' is set
      if @api_client.config.client_side_validation && customeruuid.nil?
        fail ArgumentError, "Missing the required parameter 'customeruuid' when calling EndpointsApi.get_list_of_endpoints_for_a_customer"
      end
      # resource path
      local_var_path = "/1.0.0/inventory/endpoints/customeruuid/{customeruuid}".sub('{' + 'customeruuid' + '}', customeruuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Model100InventoryEndpointsCustomeruuidResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#get_list_of_endpoints_for_a_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
