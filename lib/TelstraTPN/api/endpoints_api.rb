=begin
#Telstra Programmable Network API

#Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.4.2
Contact: pnapi-support@team.telstra.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.1.2

=end

require 'uri'

module TelstraTPN
  class EndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Endpoint name and status
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def endpoint_endpointuuid_get(endpointuuid, opts = {})
      data, _status_code, _headers = endpoint_endpointuuid_get_with_http_info(endpointuuid, opts)
      data
    end

    # Get Endpoint name and status
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def endpoint_endpointuuid_get_with_http_info(endpointuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.endpoint_endpointuuid_get ...'
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.endpoint_endpointuuid_get"
      end
      # resource path
      local_var_path = '/eis/1.0.0/endpoint/endpointuuid/{endpointuuid}'.sub('{' + 'endpointuuid' + '}', endpointuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#endpoint_endpointuuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Endpoint name
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Endpointupdaterequest] :endpointupdaterequest 
    # @return [SuccessFragment]
    def endpoint_endpointuuid_put(endpointuuid, opts = {})
      data, _status_code, _headers = endpoint_endpointuuid_put_with_http_info(endpointuuid, opts)
      data
    end

    # Update Endpoint name
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Endpointupdaterequest] :endpointupdaterequest 
    # @return [Array<(SuccessFragment, Fixnum, Hash)>] SuccessFragment data, response status code and response headers
    def endpoint_endpointuuid_put_with_http_info(endpointuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.endpoint_endpointuuid_put ...'
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.endpoint_endpointuuid_put"
      end
      # resource path
      local_var_path = '/eis/1.0.0/endpoint/endpointuuid/{endpointuuid}'.sub('{' + 'endpointuuid' + '}', endpointuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', ])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'endpointupdaterequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessFragment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#endpoint_endpointuuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign an Endpoint to a Topology
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Assigntopotagrequest] :assigntopotagrequest 
    # @return [SuccessFragment]
    def endpoints_assign_topology_tag(endpointuuid, opts = {})
      data, _status_code, _headers = endpoints_assign_topology_tag_with_http_info(endpointuuid, opts)
      data
    end

    # Assign an Endpoint to a Topology
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Assigntopotagrequest] :assigntopotagrequest 
    # @return [Array<(SuccessFragment, Fixnum, Hash)>] SuccessFragment data, response status code and response headers
    def endpoints_assign_topology_tag_with_http_info(endpointuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.endpoints_assign_topology_tag ...'
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.endpoints_assign_topology_tag"
      end
      # resource path
      local_var_path = '/eis/1.0.0/endpoints/{endpointuuid}/assign_topology_tag'.sub('{' + 'endpointuuid' + '}', endpointuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'assigntopotagrequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessFragment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#endpoints_assign_topology_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Endpoints for Topology
    # List all Endpoints associated with the topology tag.
    # @param topotaguuid Unique identifier representing a specific topology tag
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def endpoints_topology_tag_uuid(topotaguuid, opts = {})
      data, _status_code, _headers = endpoints_topology_tag_uuid_with_http_info(topotaguuid, opts)
      data
    end

    # List Endpoints for Topology
    # List all Endpoints associated with the topology tag.
    # @param topotaguuid Unique identifier representing a specific topology tag
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def endpoints_topology_tag_uuid_with_http_info(topotaguuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.endpoints_topology_tag_uuid ...'
      end
      # verify the required parameter 'topotaguuid' is set
      if @api_client.config.client_side_validation && topotaguuid.nil?
        fail ArgumentError, "Missing the required parameter 'topotaguuid' when calling EndpointsApi.endpoints_topology_tag_uuid"
      end
      # resource path
      local_var_path = '/eis/1.0.0/endpoints/topology_tag_uuid/{topotaguuid}'.sub('{' + 'topotaguuid' + '}', topotaguuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#endpoints_topology_tag_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Endpoint from a Topology
    # @param topotaguuid Unique identifier representing a specific topology tag
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def endpoints_topology_tag_uuid_endpoint(topotaguuid, endpointuuid, opts = {})
      endpoints_topology_tag_uuid_endpoint_with_http_info(topotaguuid, endpointuuid, opts)
      nil
    end

    # Remove Endpoint from a Topology
    # @param topotaguuid Unique identifier representing a specific topology tag
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def endpoints_topology_tag_uuid_endpoint_with_http_info(topotaguuid, endpointuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.endpoints_topology_tag_uuid_endpoint ...'
      end
      # verify the required parameter 'topotaguuid' is set
      if @api_client.config.client_side_validation && topotaguuid.nil?
        fail ArgumentError, "Missing the required parameter 'topotaguuid' when calling EndpointsApi.endpoints_topology_tag_uuid_endpoint"
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.endpoints_topology_tag_uuid_endpoint"
      end
      # resource path
      local_var_path = '/eis/1.0.0/endpoints/topology_tag_uuid/{topotaguuid}/endpoint/{endpointuuid}'.sub('{' + 'topotaguuid' + '}', topotaguuid.to_s).sub('{' + 'endpointuuid' + '}', endpointuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#endpoints_topology_tag_uuid_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def inventory_endpoint(endpointuuid, opts = {})
      data, _status_code, _headers = inventory_endpoint_with_http_info(endpointuuid, opts)
      data
    end

    # Get information about the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def inventory_endpoint_with_http_info(endpointuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.inventory_endpoint ...'
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.inventory_endpoint"
      end
      # resource path
      local_var_path = '/1.0.0/inventory/endpoint/{endpointuuid}'.sub('{' + 'endpointuuid' + '}', endpointuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of endpoints for a customer
    # @param customeruuid Unique identifier representing a specific customer
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def inventory_endpoints_customeruuid(customeruuid, opts = {})
      data, _status_code, _headers = inventory_endpoints_customeruuid_with_http_info(customeruuid, opts)
      data
    end

    # Get list of endpoints for a customer
    # @param customeruuid Unique identifier representing a specific customer
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def inventory_endpoints_customeruuid_with_http_info(customeruuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.inventory_endpoints_customeruuid ...'
      end
      # verify the required parameter 'customeruuid' is set
      if @api_client.config.client_side_validation && customeruuid.nil?
        fail ArgumentError, "Missing the required parameter 'customeruuid' when calling EndpointsApi.inventory_endpoints_customeruuid"
      end
      # resource path
      local_var_path = '/1.0.0/inventory/endpoints/customeruuid/{customeruuid}'.sub('{' + 'customeruuid' + '}', customeruuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_endpoints_customeruuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get statistics for endpoint
    # Get statistics related to the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param startdate Start date for statistics query
    # @param enddate End date for statistics query
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse20018>]
    def inventory_links_stats_endpoint(endpointuuid, startdate, enddate, opts = {})
      data, _status_code, _headers = inventory_links_stats_endpoint_with_http_info(endpointuuid, startdate, enddate, opts)
      data
    end

    # Get statistics for endpoint
    # Get statistics related to the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param startdate Start date for statistics query
    # @param enddate End date for statistics query
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse20018>, Fixnum, Hash)>] Array<InlineResponse20018> data, response status code and response headers
    def inventory_links_stats_endpoint_with_http_info(endpointuuid, startdate, enddate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.inventory_links_stats_endpoint ...'
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.inventory_links_stats_endpoint"
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling EndpointsApi.inventory_links_stats_endpoint"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling EndpointsApi.inventory_links_stats_endpoint"
      end
      # resource path
      local_var_path = '/1.0.0/inventory/links-stats/endpoint/{endpointuuid}/{startdate}/{enddate}'.sub('{' + 'endpointuuid' + '}', endpointuuid.to_s).sub('{' + 'startdate' + '}', startdate.to_s).sub('{' + 'enddate' + '}', enddate.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse20018>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_links_stats_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get state statistics for endpoint
    # Get statistics related to the state of the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param startdate Start date for statistics query
    # @param enddate End date for statistics query
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse20020>]
    def inventory_links_stats_endpointstate(endpointuuid, startdate, enddate, opts = {})
      data, _status_code, _headers = inventory_links_stats_endpointstate_with_http_info(endpointuuid, startdate, enddate, opts)
      data
    end

    # Get state statistics for endpoint
    # Get statistics related to the state of the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param startdate Start date for statistics query
    # @param enddate End date for statistics query
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse20020>, Fixnum, Hash)>] Array<InlineResponse20020> data, response status code and response headers
    def inventory_links_stats_endpointstate_with_http_info(endpointuuid, startdate, enddate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.inventory_links_stats_endpointstate ...'
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.inventory_links_stats_endpointstate"
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling EndpointsApi.inventory_links_stats_endpointstate"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling EndpointsApi.inventory_links_stats_endpointstate"
      end
      # resource path
      local_var_path = '/1.0.0/inventory/links-stats/endpointstate/{endpointuuid}/{startdate}/{enddate}'.sub('{' + 'endpointuuid' + '}', endpointuuid.to_s).sub('{' + 'startdate' + '}', startdate.to_s).sub('{' + 'enddate' + '}', enddate.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse20020>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_links_stats_endpointstate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Physical (Port) Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Regendpointrequest] :regendpointrequest 
    # @return [SuccessFragment]
    def inventory_regularendpoint(opts = {})
      data, _status_code, _headers = inventory_regularendpoint_with_http_info(opts)
      data
    end

    # Create Physical (Port) Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Regendpointrequest] :regendpointrequest 
    # @return [Array<(SuccessFragment, Fixnum, Hash)>] SuccessFragment data, response status code and response headers
    def inventory_regularendpoint_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.inventory_regularendpoint ...'
      end
      # resource path
      local_var_path = '/1.0.0/inventory/regularendpoint'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'regendpointrequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessFragment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_regularendpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create VPort for physical endpoint
    # Create VPort representing a VLAN on a Physical Ethernet Port
    # @param [Hash] opts the optional parameters
    # @option opts [Regvportrequest] :regvportrequest 
    # @return [SuccessFragment]
    def inventory_regularvport(opts = {})
      data, _status_code, _headers = inventory_regularvport_with_http_info(opts)
      data
    end

    # Create VPort for physical endpoint
    # Create VPort representing a VLAN on a Physical Ethernet Port
    # @param [Hash] opts the optional parameters
    # @option opts [Regvportrequest] :regvportrequest 
    # @return [Array<(SuccessFragment, Fixnum, Hash)>] SuccessFragment data, response status code and response headers
    def inventory_regularvport_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.inventory_regularvport ...'
      end
      # resource path
      local_var_path = '/1.0.0/inventory/regularvport'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'regvportrequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessFragment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_regularvport\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Instantiate Virtual Network Function
    # @param [Hash] opts the optional parameters
    # @option opts [Vnfendpointrequest] :vnfendpointrequest 
    # @return [SuccessFragment]
    def inventory_vnfendpoint(opts = {})
      data, _status_code, _headers = inventory_vnfendpoint_with_http_info(opts)
      data
    end

    # Instantiate Virtual Network Function
    # @param [Hash] opts the optional parameters
    # @option opts [Vnfendpointrequest] :vnfendpointrequest 
    # @return [Array<(SuccessFragment, Fixnum, Hash)>] SuccessFragment data, response status code and response headers
    def inventory_vnfendpoint_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.inventory_vnfendpoint ...'
      end
      # resource path
      local_var_path = '/1.0.0/inventory/vnfendpoint'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'vnfendpointrequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessFragment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_vnfendpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get details of a specific VNF
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def vnfendpoint_vnfuuid(vnfuuid, opts = {})
      data, _status_code, _headers = vnfendpoint_vnfuuid_with_http_info(vnfuuid, opts)
      data
    end

    # Get details of a specific VNF
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def vnfendpoint_vnfuuid_with_http_info(vnfuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.vnfendpoint_vnfuuid ...'
      end
      # verify the required parameter 'vnfuuid' is set
      if @api_client.config.client_side_validation && vnfuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vnfuuid' when calling EndpointsApi.vnfendpoint_vnfuuid"
      end
      # resource path
      local_var_path = '/eis/1.0.0/vnfendpoint/vnfuuid/{vnfuuid}'.sub('{' + 'vnfuuid' + '}', vnfuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#vnfendpoint_vnfuuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
