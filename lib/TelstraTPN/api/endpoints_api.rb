=begin
#Telstra Programmable Network API

#Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.1.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module TelstraTPN
  class EndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Assign a Topology Tag to an Endpoint
    # Assign a Topology Tag to an Endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Eis100EndpointsAssignTopologyTagRequest] :body 
    # @return [Array<SuccessFragment>]
    def eis100_endpoints_assign_topology_tag_by_endpointuuid_post(endpointuuid, opts = {})
      data, _status_code, _headers = eis100_endpoints_assign_topology_tag_by_endpointuuid_post_with_http_info(endpointuuid, opts)
      return data
    end

    # Assign a Topology Tag to an Endpoint
    # Assign a Topology Tag to an Endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [Eis100EndpointsAssignTopologyTagRequest] :body 
    # @return [Array<(Array<SuccessFragment>, Fixnum, Hash)>] Array<SuccessFragment> data, response status code and response headers
    def eis100_endpoints_assign_topology_tag_by_endpointuuid_post_with_http_info(endpointuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.eis100_endpoints_assign_topology_tag_by_endpointuuid_post ..."
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.eis100_endpoints_assign_topology_tag_by_endpointuuid_post"
      end
      # resource path
      local_var_path = "/eis/1.0.0/endpoints/{endpointuuid}/assign_topology_tag".sub('{' + 'endpointuuid' + '}', endpointuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SuccessFragment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#eis100_endpoints_assign_topology_tag_by_endpointuuid_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information about the specified endpoint
    # Get information about the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [InventoryEndpointResponse]
    def inventory_endpoint_by_endpointuuid_get(endpointuuid, opts = {})
      data, _status_code, _headers = inventory_endpoint_by_endpointuuid_get_with_http_info(endpointuuid, opts)
      return data
    end

    # Get information about the specified endpoint
    # Get information about the specified endpoint
    # @param endpointuuid Unique identifier representing a specific endpoint
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryEndpointResponse, Fixnum, Hash)>] InventoryEndpointResponse data, response status code and response headers
    def inventory_endpoint_by_endpointuuid_get_with_http_info(endpointuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.inventory_endpoint_by_endpointuuid_get ..."
      end
      # verify the required parameter 'endpointuuid' is set
      if @api_client.config.client_side_validation && endpointuuid.nil?
        fail ArgumentError, "Missing the required parameter 'endpointuuid' when calling EndpointsApi.inventory_endpoint_by_endpointuuid_get"
      end
      # resource path
      local_var_path = "/1.0.0/inventory/endpoint/{endpointuuid}".sub('{' + 'endpointuuid' + '}', endpointuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InventoryEndpointResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_endpoint_by_endpointuuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of endpoints for a customer
    # Get list of endpoints for a customer
    # @param customeruuid Unique identifier representing a specific customer
    # @param [Hash] opts the optional parameters
    # @return [InventoryEndpointsCustomeruuidResponse]
    def inventory_endpoints_customeruuid_by_customeruuid_get(customeruuid, opts = {})
      data, _status_code, _headers = inventory_endpoints_customeruuid_by_customeruuid_get_with_http_info(customeruuid, opts)
      return data
    end

    # Get list of endpoints for a customer
    # Get list of endpoints for a customer
    # @param customeruuid Unique identifier representing a specific customer
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryEndpointsCustomeruuidResponse, Fixnum, Hash)>] InventoryEndpointsCustomeruuidResponse data, response status code and response headers
    def inventory_endpoints_customeruuid_by_customeruuid_get_with_http_info(customeruuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.inventory_endpoints_customeruuid_by_customeruuid_get ..."
      end
      # verify the required parameter 'customeruuid' is set
      if @api_client.config.client_side_validation && customeruuid.nil?
        fail ArgumentError, "Missing the required parameter 'customeruuid' when calling EndpointsApi.inventory_endpoints_customeruuid_by_customeruuid_get"
      end
      # resource path
      local_var_path = "/1.0.0/inventory/endpoints/customeruuid/{customeruuid}".sub('{' + 'customeruuid' + '}', customeruuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InventoryEndpointsCustomeruuidResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_endpoints_customeruuid_by_customeruuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Physical (Port) Endpoint
    # Create Physical (Port) Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryRegularendpointRequest] :body 
    # @return [Array<InventoryRegularendpointResponse>]
    def inventory_regularendpoint_post(opts = {})
      data, _status_code, _headers = inventory_regularendpoint_post_with_http_info(opts)
      return data
    end

    # Create Physical (Port) Endpoint
    # Create Physical (Port) Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryRegularendpointRequest] :body 
    # @return [Array<(Array<InventoryRegularendpointResponse>, Fixnum, Hash)>] Array<InventoryRegularendpointResponse> data, response status code and response headers
    def inventory_regularendpoint_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.inventory_regularendpoint_post ..."
      end
      # resource path
      local_var_path = "/1.0.0/inventory/regularendpoint"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InventoryRegularendpointResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_regularendpoint_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create VNF Endpoint
    # Create VNF Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryVnfendpointRequest] :body 
    # @return [Array<InventoryVnfendpointResponse>]
    def inventory_vnfendpoint_post(opts = {})
      data, _status_code, _headers = inventory_vnfendpoint_post_with_http_info(opts)
      return data
    end

    # Create VNF Endpoint
    # Create VNF Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [InventoryVnfendpointRequest] :body 
    # @return [Array<(Array<InventoryVnfendpointResponse>, Fixnum, Hash)>] Array<InventoryVnfendpointResponse> data, response status code and response headers
    def inventory_vnfendpoint_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndpointsApi.inventory_vnfendpoint_post ..."
      end
      # resource path
      local_var_path = "/1.0.0/inventory/vnfendpoint"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InventoryVnfendpointResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#inventory_vnfendpoint_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
