=begin
#Telstra Programmable Network API

#Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.4.2
Contact: pnapi-support@team.telstra.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.1.2

=end

require 'uri'

module TelstraTPN
  class VnfsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create backup of specified VNF
    # 'Note: if a second backup creation is attempted while one is already active, an error will be returned indicating that the VNF is invalid. If replace_backup_uuid is provided, this backup is deleted once the new backup is successfully completed'
    # @param [Hash] opts the optional parameters
    # @option opts [Backuprequest] :backuprequest 
    # @return [Backup]
    def bms_backup(opts = {})
      data, _status_code, _headers = bms_backup_with_http_info(opts)
      data
    end

    # Create backup of specified VNF
    # &#39;Note: if a second backup creation is attempted while one is already active, an error will be returned indicating that the VNF is invalid. If replace_backup_uuid is provided, this backup is deleted once the new backup is successfully completed&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [Backuprequest] :backuprequest 
    # @return [Array<(Backup, Fixnum, Hash)>] Backup data, response status code and response headers
    def bms_backup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.bms_backup ...'
      end
      # resource path
      local_var_path = '/bms/1.0.0/backup'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'backuprequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Backup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#bms_backup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete specified backup
    # @param backupuuid Unique identifier representing a specific VNF backup
    # @param [Hash] opts the optional parameters
    # @return [Backup]
    def bms_backup_delete(backupuuid, opts = {})
      data, _status_code, _headers = bms_backup_delete_with_http_info(backupuuid, opts)
      data
    end

    # Delete specified backup
    # @param backupuuid Unique identifier representing a specific VNF backup
    # @param [Hash] opts the optional parameters
    # @return [Array<(Backup, Fixnum, Hash)>] Backup data, response status code and response headers
    def bms_backup_delete_with_http_info(backupuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.bms_backup_delete ...'
      end
      # verify the required parameter 'backupuuid' is set
      if @api_client.config.client_side_validation && backupuuid.nil?
        fail ArgumentError, "Missing the required parameter 'backupuuid' when calling VnfsApi.bms_backup_delete"
      end
      # resource path
      local_var_path = '/bms/1.0.0/backup/{backupuuid}'.sub('{' + 'backupuuid' + '}', backupuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Backup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#bms_backup_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about the specified backup
    # @param backupuuid Unique identifier representing a specific VNF backup
    # @param [Hash] opts the optional parameters
    # @return [Backup]
    def bms_backup_get(backupuuid, opts = {})
      data, _status_code, _headers = bms_backup_get_with_http_info(backupuuid, opts)
      data
    end

    # Get information about the specified backup
    # @param backupuuid Unique identifier representing a specific VNF backup
    # @param [Hash] opts the optional parameters
    # @return [Array<(Backup, Fixnum, Hash)>] Backup data, response status code and response headers
    def bms_backup_get_with_http_info(backupuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.bms_backup_get ...'
      end
      # verify the required parameter 'backupuuid' is set
      if @api_client.config.client_side_validation && backupuuid.nil?
        fail ArgumentError, "Missing the required parameter 'backupuuid' when calling VnfsApi.bms_backup_get"
      end
      # resource path
      local_var_path = '/bms/1.0.0/backup/{backupuuid}'.sub('{' + 'backupuuid' + '}', backupuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Backup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#bms_backup_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restore VNF from backup
    # Restore VNF from specified backup
    # @param backupuuid Unique identifier representing a specific VNF backup
    # @param [Hash] opts the optional parameters
    # @return [Backup]
    def bms_backup_restore(backupuuid, opts = {})
      data, _status_code, _headers = bms_backup_restore_with_http_info(backupuuid, opts)
      data
    end

    # Restore VNF from backup
    # Restore VNF from specified backup
    # @param backupuuid Unique identifier representing a specific VNF backup
    # @param [Hash] opts the optional parameters
    # @return [Array<(Backup, Fixnum, Hash)>] Backup data, response status code and response headers
    def bms_backup_restore_with_http_info(backupuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.bms_backup_restore ...'
      end
      # verify the required parameter 'backupuuid' is set
      if @api_client.config.client_side_validation && backupuuid.nil?
        fail ArgumentError, "Missing the required parameter 'backupuuid' when calling VnfsApi.bms_backup_restore"
      end
      # resource path
      local_var_path = '/bms/1.0.0/backup/{backupuuid}/restore'.sub('{' + 'backupuuid' + '}', backupuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', ])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Backup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#bms_backup_restore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List backups
    # List available backups for the specified VNF
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [Array<Backup>]
    def bms_backup_vnf(vnfuuid, opts = {})
      data, _status_code, _headers = bms_backup_vnf_with_http_info(vnfuuid, opts)
      data
    end

    # List backups
    # List available backups for the specified VNF
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Backup>, Fixnum, Hash)>] Array<Backup> data, response status code and response headers
    def bms_backup_vnf_with_http_info(vnfuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.bms_backup_vnf ...'
      end
      # verify the required parameter 'vnfuuid' is set
      if @api_client.config.client_side_validation && vnfuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vnfuuid' when calling VnfsApi.bms_backup_vnf"
      end
      # resource path
      local_var_path = '/bms/1.0.0/backup/vnf/{vnfuuid}'.sub('{' + 'vnfuuid' + '}', vnfuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Backup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#bms_backup_vnf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete multiple backups
    # Delete list of backups associated with specified VNF
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse202]
    def bms_backup_vnf_delete(vnfuuid, opts = {})
      data, _status_code, _headers = bms_backup_vnf_delete_with_http_info(vnfuuid, opts)
      data
    end

    # Delete multiple backups
    # Delete list of backups associated with specified VNF
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse202, Fixnum, Hash)>] InlineResponse202 data, response status code and response headers
    def bms_backup_vnf_delete_with_http_info(vnfuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.bms_backup_vnf_delete ...'
      end
      # verify the required parameter 'vnfuuid' is set
      if @api_client.config.client_side_validation && vnfuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vnfuuid' when calling VnfsApi.bms_backup_vnf_delete"
      end
      # resource path
      local_var_path = '/bms/1.0.0/backup/vnf/{vnfuuid}/delete'.sub('{' + 'vnfuuid' + '}', vnfuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse202')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#bms_backup_vnf_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create VNF VPort
    # @param [Hash] opts the optional parameters
    # @option opts [Vportrequest] :vportrequest 
    # @return [InlineResponse2008]
    def inventory_vnf_vport(opts = {})
      data, _status_code, _headers = inventory_vnf_vport_with_http_info(opts)
      data
    end

    # Create VNF VPort
    # @param [Hash] opts the optional parameters
    # @option opts [Vportrequest] :vportrequest 
    # @return [Array<(InlineResponse2008, Fixnum, Hash)>] InlineResponse2008 data, response status code and response headers
    def inventory_vnf_vport_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.inventory_vnf_vport ...'
      end
      # resource path
      local_var_path = '/1.0.0/inventory/vnf/vport'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'vportrequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2008')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#inventory_vnf_vport\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Instantiate Virtual Network Function
    # @param [Hash] opts the optional parameters
    # @option opts [Vnfendpointrequest] :vnfendpointrequest 
    # @return [SuccessFragment]
    def inventory_vnfendpoint(opts = {})
      data, _status_code, _headers = inventory_vnfendpoint_with_http_info(opts)
      data
    end

    # Instantiate Virtual Network Function
    # @param [Hash] opts the optional parameters
    # @option opts [Vnfendpointrequest] :vnfendpointrequest 
    # @return [Array<(SuccessFragment, Fixnum, Hash)>] SuccessFragment data, response status code and response headers
    def inventory_vnfendpoint_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.inventory_vnfendpoint ...'
      end
      # resource path
      local_var_path = '/1.0.0/inventory/vnfendpoint'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'vnfendpointrequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessFragment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#inventory_vnfendpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List images in the Marketplace
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2009]
    def marketplace_image(opts = {})
      data, _status_code, _headers = marketplace_image_with_http_info(opts)
      data
    end

    # List images in the Marketplace
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2009, Fixnum, Hash)>] InlineResponse2009 data, response status code and response headers
    def marketplace_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.marketplace_image ...'
      end
      # resource path
      local_var_path = '/1.0.0/marketplace/image'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2009')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#marketplace_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add specified image to \"My Images\"
    # Note that trailing / is required, body must be {}
    # @param imageid Identifier representing a specific VNF image
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [InlineResponse20010]
    def marketplace_image_add(imageid, opts = {})
      data, _status_code, _headers = marketplace_image_add_with_http_info(imageid, opts)
      data
    end

    # Add specified image to \&quot;My Images\&quot;
    # Note that trailing / is required, body must be {}
    # @param imageid Identifier representing a specific VNF image
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(InlineResponse20010, Fixnum, Hash)>] InlineResponse20010 data, response status code and response headers
    def marketplace_image_add_with_http_info(imageid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.marketplace_image_add ...'
      end
      # verify the required parameter 'imageid' is set
      if @api_client.config.client_side_validation && imageid.nil?
        fail ArgumentError, "Missing the required parameter 'imageid' when calling VnfsApi.marketplace_image_add"
      end
      # resource path
      local_var_path = '/1.0.0/marketplace/image/{imageid}/add_to_my_images/'.sub('{' + 'imageid' + '}', imageid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', ])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'unknown_base_type'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20010')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#marketplace_image_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about the specified image
    # Note that trailing / is required
    # @param imageid Identifier representing a specific VNF image
    # @param [Hash] opts the optional parameters
    # @return [Image]
    def marketplace_image_imageid(imageid, opts = {})
      data, _status_code, _headers = marketplace_image_imageid_with_http_info(imageid, opts)
      data
    end

    # Get information about the specified image
    # Note that trailing / is required
    # @param imageid Identifier representing a specific VNF image
    # @param [Hash] opts the optional parameters
    # @return [Array<(Image, Fixnum, Hash)>] Image data, response status code and response headers
    def marketplace_image_imageid_with_http_info(imageid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.marketplace_image_imageid ...'
      end
      # verify the required parameter 'imageid' is set
      if @api_client.config.client_side_validation && imageid.nil?
        fail ArgumentError, "Missing the required parameter 'imageid' when calling VnfsApi.marketplace_image_imageid"
      end
      # resource path
      local_var_path = '/1.0.0/marketplace/image/{imageid}/'.sub('{' + 'imageid' + '}', imageid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Image')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#marketplace_image_imageid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List images in \"My Images\"
    # Note that trailing / is required
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2009]
    def marketplace_image_my_images(opts = {})
      data, _status_code, _headers = marketplace_image_my_images_with_http_info(opts)
      data
    end

    # List images in \&quot;My Images\&quot;
    # Note that trailing / is required
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2009, Fixnum, Hash)>] InlineResponse2009 data, response status code and response headers
    def marketplace_image_my_images_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.marketplace_image_my_images ...'
      end
      # resource path
      local_var_path = '/1.0.0/marketplace/image/my_images/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2009')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#marketplace_image_my_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove specified image from \"My Images\"
    # Note that trailing / is required, body must be {}
    # @param imageid Identifier representing a specific VNF image
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [InlineResponse20010]
    def marketplace_image_remove(imageid, opts = {})
      data, _status_code, _headers = marketplace_image_remove_with_http_info(imageid, opts)
      data
    end

    # Remove specified image from \&quot;My Images\&quot;
    # Note that trailing / is required, body must be {}
    # @param imageid Identifier representing a specific VNF image
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(InlineResponse20010, Fixnum, Hash)>] InlineResponse20010 data, response status code and response headers
    def marketplace_image_remove_with_http_info(imageid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.marketplace_image_remove ...'
      end
      # verify the required parameter 'imageid' is set
      if @api_client.config.client_side_validation && imageid.nil?
        fail ArgumentError, "Missing the required parameter 'imageid' when calling VnfsApi.marketplace_image_remove"
      end
      # resource path
      local_var_path = '/1.0.0/marketplace/image/{imageid}/remove_from_my_images/'.sub('{' + 'imageid' + '}', imageid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', ])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'unknown_base_type'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20010')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#marketplace_image_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get status information about the specified VNF
    # 'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20011]
    def vnf(vnfuuid, opts = {})
      data, _status_code, _headers = vnf_with_http_info(vnfuuid, opts)
      data
    end

    # Get status information about the specified VNF
    # &#39;Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED&#39;
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20011, Fixnum, Hash)>] InlineResponse20011 data, response status code and response headers
    def vnf_with_http_info(vnfuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.vnf ...'
      end
      # verify the required parameter 'vnfuuid' is set
      if @api_client.config.client_side_validation && vnfuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vnfuuid' when calling VnfsApi.vnf"
      end
      # resource path
      local_var_path = '/vnfds/1.0.0/vnf/{vnfuuid}/'.sub('{' + 'vnfuuid' + '}', vnfuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20011')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#vnf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reboot the specified VNF
    # reboot_type is 'warm' or 'cold'
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @option opts [Rebootrequest] :rebootrequest 
    # @return [nil]
    def vnf_reboot(vnfuuid, opts = {})
      vnf_reboot_with_http_info(vnfuuid, opts)
      nil
    end

    # Reboot the specified VNF
    # reboot_type is &#39;warm&#39; or &#39;cold&#39;
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @option opts [Rebootrequest] :rebootrequest 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def vnf_reboot_with_http_info(vnfuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.vnf_reboot ...'
      end
      # verify the required parameter 'vnfuuid' is set
      if @api_client.config.client_side_validation && vnfuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vnfuuid' when calling VnfsApi.vnf_reboot"
      end
      # resource path
      local_var_path = '/vnfds/1.0.0/vnf/{vnfuuid}/reboot'.sub('{' + 'vnfuuid' + '}', vnfuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'rebootrequest'])
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#vnf_reboot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resume the specified VNF
    # Note that body must be {}
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vnf_resume(vnfuuid, opts = {})
      vnf_resume_with_http_info(vnfuuid, opts)
      nil
    end

    # Resume the specified VNF
    # Note that body must be {}
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def vnf_resume_with_http_info(vnfuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.vnf_resume ...'
      end
      # verify the required parameter 'vnfuuid' is set
      if @api_client.config.client_side_validation && vnfuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vnfuuid' when calling VnfsApi.vnf_resume"
      end
      # resource path
      local_var_path = '/vnfds/1.0.0/vnf/{vnfuuid}/resume'.sub('{' + 'vnfuuid' + '}', vnfuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#vnf_resume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Suspend the specified VNF
    # Note that body must be {}
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vnf_suspend(vnfuuid, opts = {})
      vnf_suspend_with_http_info(vnfuuid, opts)
      nil
    end

    # Suspend the specified VNF
    # Note that body must be {}
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def vnf_suspend_with_http_info(vnfuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.vnf_suspend ...'
      end
      # verify the required parameter 'vnfuuid' is set
      if @api_client.config.client_side_validation && vnfuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vnfuuid' when calling VnfsApi.vnf_suspend"
      end
      # resource path
      local_var_path = '/vnfds/1.0.0/vnf/{vnfuuid}/suspend'.sub('{' + 'vnfuuid' + '}', vnfuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#vnf_suspend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get details of a specific VNF
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def vnfendpoint_vnfuuid(vnfuuid, opts = {})
      data, _status_code, _headers = vnfendpoint_vnfuuid_with_http_info(vnfuuid, opts)
      data
    end

    # Get details of a specific VNF
    # @param vnfuuid Unique identifier representing a specific virtual network function
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def vnfendpoint_vnfuuid_with_http_info(vnfuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VnfsApi.vnfendpoint_vnfuuid ...'
      end
      # verify the required parameter 'vnfuuid' is set
      if @api_client.config.client_side_validation && vnfuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vnfuuid' when calling VnfsApi.vnfendpoint_vnfuuid"
      end
      # resource path
      local_var_path = '/eis/1.0.0/vnfendpoint/vnfuuid/{vnfuuid}'.sub('{' + 'vnfuuid' + '}', vnfuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VnfsApi#vnfendpoint_vnfuuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
