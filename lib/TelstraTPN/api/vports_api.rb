=begin
#Telstra Programmable Network API

#Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module TelstraTPN
  class VportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create VPort for physical endpoint
    # Create VPort representing a VLAN on a Physical Ethernet Port
    # @param [Hash] opts the optional parameters
    # @option opts [Model100InventoryRegularvportRequest] :body 
    # @return [Model100InventoryRegularvportResponse]
    def create_v_port_for_physical_endpoint(opts = {})
      data, _status_code, _headers = create_v_port_for_physical_endpoint_with_http_info(opts)
      return data
    end

    # Create VPort for physical endpoint
    # Create VPort representing a VLAN on a Physical Ethernet Port
    # @param [Hash] opts the optional parameters
    # @option opts [Model100InventoryRegularvportRequest] :body 
    # @return [Array<(Model100InventoryRegularvportResponse, Fixnum, Hash)>] Model100InventoryRegularvportResponse data, response status code and response headers
    def create_v_port_for_physical_endpoint_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VportsApi.create_v_port_for_physical_endpoint ..."
      end
      # resource path
      local_var_path = "/1.0.0/inventory/regularvport"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Model100InventoryRegularvportResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VportsApi#create_v_port_for_physical_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create VNF VPort
    # Create VNF VPort
    # @param [Hash] opts the optional parameters
    # @option opts [Model100InventoryVnfVportRequest] :body 
    # @return [Model100InventoryVnfVportResponse]
    def create_vnf_v_port(opts = {})
      data, _status_code, _headers = create_vnf_v_port_with_http_info(opts)
      return data
    end

    # Create VNF VPort
    # Create VNF VPort
    # @param [Hash] opts the optional parameters
    # @option opts [Model100InventoryVnfVportRequest] :body 
    # @return [Array<(Model100InventoryVnfVportResponse, Fixnum, Hash)>] Model100InventoryVnfVportResponse data, response status code and response headers
    def create_vnf_v_port_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VportsApi.create_vnf_v_port ..."
      end
      # resource path
      local_var_path = "/1.0.0/inventory/vnf/vport"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Model100InventoryVnfVportResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VportsApi#create_vnf_v_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information about the specified VPort
    # Get information about the specified VPort
    # @param vportuuid Unique identifier representing a specific virtual port
    # @param [Hash] opts the optional parameters
    # @return [EndpointPort]
    def get_information_about_the_specified_v_port(vportuuid, opts = {})
      data, _status_code, _headers = get_information_about_the_specified_v_port_with_http_info(vportuuid, opts)
      return data
    end

    # Get information about the specified VPort
    # Get information about the specified VPort
    # @param vportuuid Unique identifier representing a specific virtual port
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointPort, Fixnum, Hash)>] EndpointPort data, response status code and response headers
    def get_information_about_the_specified_v_port_with_http_info(vportuuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VportsApi.get_information_about_the_specified_v_port ..."
      end
      # verify the required parameter 'vportuuid' is set
      if @api_client.config.client_side_validation && vportuuid.nil?
        fail ArgumentError, "Missing the required parameter 'vportuuid' when calling VportsApi.get_information_about_the_specified_v_port"
      end
      # resource path
      local_var_path = "/1.0.0/inventory/vport/{vportuuid}".sub('{' + 'vportuuid' + '}', vportuuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VportsApi#get_information_about_the_specified_v_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
