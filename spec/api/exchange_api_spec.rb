=begin
#Telstra Programmable Network API

#Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.4.0
Contact: pnapi-support@team.telstra.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for TelstraTPN::ExchangeApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ExchangeApi' do
  before do
    # run before each test
    @instance = TelstraTPN::ExchangeApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExchangeApi' do
    it 'should create an instance of ExchangeApi' do
      expect(@instance).to be_instance_of(TelstraTPN::ExchangeApi)
    end
  end

  # unit tests for accountprofileexchangeget
  # Get the current account&#39;s Exchange profile
  # 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  describe 'accountprofileexchangeget test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchangeexprovuuidget
  # Exchange provider details
  # Get information about the specified Exchange provider
  # @param exprovuuid Unique identifier representing a specific exchange provider
  # @param [Hash] opts the optional parameters
  # @return [ExchangeProvider]
  describe 'exchangeexprovuuidget test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchangeget
  # List all Exchange providers, with POPs
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<ExchangeProvider>]
  describe 'exchangeget test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visitcardget
  # Get list of Visit Cards
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Visitcard>]
  describe 'visitcardget test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visitcardvisitcarduuidget
  # View details of the specified Visit Card
  # 
  # @param visitcarduuid Unique identifier representing a specific exchange visit card (provider description)
  # @param [Hash] opts the optional parameters
  # @option opts [] :body 
  # @return [Visitcard]
  describe 'visitcardvisitcarduuidget test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visitcardvisitcarduuidput
  # Update details of the specified Visit Card
  # 
  # @param visitcarduuid Unique identifier representing a specific exchange visit card (provider description)
  # @param [Hash] opts the optional parameters
  # @option opts [] :body 
  # @return [Visitcard]
  describe 'visitcardvisitcarduuidput test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
